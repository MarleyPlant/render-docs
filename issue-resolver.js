import fs from "fs"
import path from "path"
import OpenAI from 'openai'

class IssueResolver {
    constructor(messages, apiKey = process.env["OPENAI_API_KEY"]) {
        this.openai = new OpenAI({
            apiKey: apiKey
        });

        this.messages = this.groupMessagesByFile(messages)
    }
    
    groupMessagesByFile(messages){
        return messages.reduce((accumulator, message) => {
            // Messages are in the format "file:line: warning: message"
            const [file, line, warning, ...rest] = message.split(":")
            const key = `${file}`
            if(!accumulator[key]) accumulator[key] = []
            accumulator[key].push(`${line}: ${rest.join(":").trim()}`)
            return accumulator
        }, {})
    }

    constructPrompt(file, messages){
        console.log(`üìÑ Constructing prompt for file ${file}`)
        const fileContents = fs.readFileSync(file).toString()
        const filename = path.basename(file)
        const promptIntro = `There are some issues with the documentation in a C++ file (${filename}). Here is the code:\n\n\`\`\`cpp\n${fileContents}\n\`\`\``
        const promptWarnings = `The following are the warnings generated by doxygen. They are in the format 'line: warning': \n\n\`\`\`\n${messages.join("\n")}\n\`\`\``
        const promptOutro = `Could you please fix the issues? Please print the whole file including those fixes as a code block without any extra text or explanations.`
        const constructedPrompt = `${promptIntro}\n\n${promptWarnings}\n\n${promptOutro}`
        return constructedPrompt
    }

    async getResolvedFile(file){
        const messages = this.messages[file]        
        const prompt = this.constructPrompt(file, messages)
        try {
            const chatCompletion = await this.openai.chat.completions.create({
                messages: [{ role: 'user', content: prompt }],
                model: 'gpt-3.5-turbo',
            });
            console.log(chatCompletion)
            const response = chatCompletion.data.choices[0].text
            return response
        } catch (error) {
            console.error(`‚ùå Error resolving issues. ${error.message}`)
            return null
        }
    }

    async resolve() {
        let result = true
        
        for (const file of Object.keys(this.messages)) {
            const resolvedFile = await this.getResolvedFile(file)
            if(resolvedFile){
                fs.writeFileSync(file, resolvedFile)
            } else {
                result = false
            }
        }
        return result
    }
}

export default IssueResolver